class ComplexSoftShrink(Module):
    ...

    def __init__(self, alpha=0.5, cdim=None, inplace=False):
        ...

    def forward(self, input, alpha=None):
        ...

class SoftShrink(Module):
    ...

    def __init__(self, alpha=0.5, inplace=False):
        ...

    def forward(self, input, alpha=None):
        ...

class ComplexSequential(Sequential):
    ...

    def forward(self, input):
        ...

class ComplexDropout(Module):
    ...

    def __init__(self, p=0.5, inplace=False):
        ...

    def forward(self, input):
        ...

class ComplexDropout2d(Module):
    ...

    def __init__(self, p=0.5, inplace=False):
        ...

    def forward(self, input):
        ...

class ComplexMaxPool2d(Module):
    ...

    def __init__(self, kernel_size, stride=None, padding=0, dilation=1, return_indices=False, ceil_mode=False):
        ...

    def forward(self, input):
        ...

class ComplexMaxPool1d(Module):
    ...

    def __init__(self, kernel_size, stride=None, padding=0, dilation=1, return_indices=False, ceil_mode=False):
        ...

    def forward(self, input):
        ...

class ComplexReLU(Module):
    ...

    def __init__(self, inplace=False):
        ...

    def forward(self, input):
        ...

class ComplexLeakyReLU(Module):
    ...

    def __init__(self, negative_slope=(0.01, 0.01), inplace=False):
        ...

    def forward(self, input):
        ...

class ComplexConvTranspose2d(Module):
    ...

    def __init__(self, in_channels, out_channels, kernel_size, stride=1, padding=0, output_padding=0, groups=1, bias=True, dilation=1, padding_mode='zeros'):
        ...

    def forward(self, input):
        ...

class ComplexConv2d(Module):
    ...

    def __init__(self, in_channels, out_channels, kernel_size=3, stride=1, padding=0, dilation=1, groups=1, bias=True, padding_mode='zeros'):
        ...

    def forward(self, input):
        ...

class ComplexConvTranspose1d(Module):
    ...

    def __init__(self, in_channels, out_channels, kernel_size, stride=1, padding=0, output_padding=0, groups=1, bias=True, dilation=1, padding_mode='zeros'):
        ...

    def forward(self, input):
        ...

class ComplexConv1d(Module):
    ...

    def __init__(self, in_channels, out_channels, kernel_size=3, stride=1, padding=0, dilation=1, groups=1, bias=True, padding_mode='zeros'):
        ...

    def forward(self, input):
        ...

class ComplexUpsample(Module):
    ...

    def __init__(self, size=None, scale_factor=None, mode='nearest', align_corners=None):
        ...

    def forward(self, input):
        ...

class ComplexLinear(Module):
    ...

    def __init__(self, in_features, out_features, bias=True, cdim=-1):
        ...

    def forward(self, input):
        ...

class NaiveComplexBatchNorm1d(Module):
    ...

    def __init__(self, num_features, eps=1e-5, momentum=0.1, affine=True, track_running_stats=True, cdim=-1):
        ...

    def forward(self, input):
        ...

class NaiveComplexBatchNorm2d(Module):
    ...

    def __init__(self, num_features, eps=1e-5, momentum=0.1, affine=True, track_running_stats=True):
        ...

    def forward(self, input):
        ...

class _ComplexBatchNorm(Module):
    ...

    def __init__(self, num_features, eps=1e-5, momentum=0.1, affine=True, track_running_stats=True):
        ...

    def reset_running_stats(self):
        ...

    def reset_parameters(self):
        ...

class ComplexBatchNorm2d(_ComplexBatchNorm):
    ...

    def forward(self, input):
        ...

class ComplexBatchNorm1d(_ComplexBatchNorm):
    ...

    def forward(self, input):
        ...

class ComplexConv1(Module):
    ...

    def __init__(self, axis, in_channels, out_channels, kernel_size=3, stride=1, padding=0, dilation=1, groups=1, bias=True, padding_mode='zeros'):
        ...

    def forward(self, Xr, Xi):
        ...

class ComplexMaxPool1(Module):
    ...

    def __init__(self, axis, kernel_size, stride=None, padding=0, dilation=1, return_indices=False, ceil_mode=False):
        ...

    def forward(self, Xr, Xi):
        ...

class ComplexConv2(Module):
    ...

    def __init__(self, in_channels, out_channels, kernel_size=3, stride=1, padding=0, dilation=1, groups=1, bias=True, padding_mode='zeros'):
        ...

    def forward(self, Xr, Xi):
        ...

class ComplexMaxPool2(Module):
    ...

    def __init__(self, kernel_size, stride=None, padding=0, dilation=1, return_indices=False, ceil_mode=False):
        ...

    def forward(self, Xr, Xi):
        ...


